---
title: "EDS 213 Data Cleaning Assignment"
subtitle: "Columns 'Water_cover' and 'Land_cover'"
date: 2025-04-16
format: html
theme: cyborg
author: Kaiju Morquecho
---

Let's load any necessary libraries and write file names

```{r}
library(tidyverse)

# file names 
datadir_raw <- "data/raw/"
snowsurvey_file <- "ASDN_Snow_survey.csv"
```

Read in the Snow Survey data

```{r message=FALSE}
snowsurvey <- read_csv(file.path(datadir_raw, snowsurvey_file))
```

Use in-class code to clean the Snow_cover column

```{r}
snowsurvey_fixed <- snowsurvey %>%
  mutate(
    Snow_cover = case_when(
      Snow_cover == "." ~ NA, 
      Snow_cover == "-" ~ NA, 
      Snow_cover == "n/a" ~ NA,
      Snow_cover == "unk" ~ NA,
      Snow_cover == "<1" ~ "0", 
      .default = Snow_cover 
    ),
    Snow_cover = as.numeric(Snow_cover)
  )
```

Take a look at snowsurvey_fixed's Snow_cover data type

```{r}
glimpse(snowsurvey_fixed) # we see that Snow_cover is <dbl> but Land and Water are still <chr>
```

Take a look at the Water_cover and Land_cover columns to identify problematic values

```{r}
# if we take a look at the unique values in snowsurvey_fixed we can see what values we must replace/clean before turning into numeric

unique(snowsurvey_fixed$Water_cover) 
unique(snowsurvey_fixed$Land_cover)
```

Replace the identified problematic values in Water_cover ('-','n/a','unk','.')

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>%
  mutate(Water_cover = case_when(
    Water_cover %in% c(".","unk","-","n/a") ~ NA,
    .default = Water_cover)
  )
```

Let's check if our replacement worked correctly

```{r}
snowsurvey_fixed %>% 
  count(Water_cover) %>%
  filter(is.na(as.numeric(Water_cover)))
```

It worked, now we only have numbers and NAs. Let's make the transformation

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>%
  mutate(Water_cover = as.numeric(Water_cover))
```

Let's check for values greater than 100 or less than 0. The metadata (and logic) suggests checking percentage =< 100. 

```{r}
snowsurvey_fixed %>% 
  filter(Water_cover > 100) # more than 100?

snowsurvey_fixed %>% 
  filter(Water_cover < 0) # negative number? less than 0? 

```

We have one value in Water_cover that is > 100 (it's 353). Let's make it an NA

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  mutate(Water_cover = ifelse(Water_cover > 100, NA, Water_cover))
```

## Now let's repeat the steps for Land_cover

Replace the identified problematic values in Later_cover ('-','n/a','unk','.')

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>%
  mutate(Land_cover = case_when(
    Land_cover %in% c(".","unk","-","n/a") ~ NA,
    .default = Land_cover)
  )
```

Let's check if our replacement worked correctly

```{r}
snowsurvey_fixed %>% 
  count(Land_cover) %>%
  filter(is.na(as.numeric(Land_cover)))
```

It worked, now we only have numbers and NAs. Let's make the transformation

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>%
  mutate(Land_cover = as.numeric(Land_cover))
```

I did not see any values greater than 100 or less than 0. The metadata (and logic) suggests checking percentage =< 100. 

```{r}
snowsurvey_fixed %>% 
  filter(Land_cover > 100) # more than 100?

snowsurvey_fixed %>% 
  filter(Land_cover < 0) # negative number? less than 0? 

```

We have two value in Land_cover that are < 0 (-100 and -298). Let's make them NA

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  mutate(Land_cover = ifelse(Land_cover < 0, NA, Land_cover))
```

Let's take one final look at Land_cover and Water_cover's data type

```{r}
glimpse(snowsurvey_fixed)
```

Yay. Now all 3 x_cover columns are <dbl>s

### Now that we have numeric columns, let's recompute and infer values for Total_cover

```{r}
# we will check each column for missing values  
snowsurvey_fixed %>%
  filter(is.na(Snow_cover)) %>%
  count() # 796 missing 

snowsurvey_fixed %>%
  filter(is.na(Water_cover)) %>%
  count() # 768 missing 

snowsurvey_fixed %>%
  filter(is.na(Land_cover)) %>%
  count() # 774 missing 

snowsurvey_fixed %>%
  filter(is.na(Total_cover)) %>%
  count() # 81 missing 
```
Since Snow_cover, Land_cover, and Water_cover add up to Total_cover, we will use them to infer the missing values. 
























